generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String         @unique
  role          Role           @default(PATIENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fullName      String
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  id            Int            @id @default(autoincrement())
  phone         String?
  profileImage  String?
  doctor        Doctor?
  sentMessages  Message[]
  notifications Notification[]
  patient       Patient?
}

model Patient {
  insuranceInfo    String?
  emergencyContact String?
  pnc              String?         @unique @db.Char(13)
  id               Int             @id @default(autoincrement())
  userId           Int             @unique
  appointments     Appointment[]
  chatSessions     ChatSession[]   @relation("PatientChats")
  medicalRecords   MedicalRecord[]
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Specialty {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  doctors   Doctor[]
}

model Doctor {
  licenseNumber  String?
  biography      String?
  id             Int             @id @default(autoincrement())
  userId         Int             @unique   
  specialtyId    Int?
  specialty      Specialty?      @relation(fields: [specialtyId], references: [id])
  appointments   Appointment[]
  chatSessions   ChatSession[]   @relation("DoctorChats")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecords MedicalRecord[]
}

model Appointment {
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(PENDING)
  type           AppointmentType
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  id             Int               @id @default(autoincrement())
  patientId      Int
  doctorId       Int
  doctor         Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient        Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  videoSession   VideoSession?
  meetingLink    String?
}

model MedicalRecord {
  title       String
  description String
  fileUrl     String?
  type        RecordType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  id          Int        @id @default(autoincrement())
  patientId   Int
  doctorId    Int
  doctor      Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient     Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model VideoSession {
  sessionToken  String      @unique
  startedAt     DateTime?
  endedAt       DateTime?
  id            Int         @id @default(autoincrement())
  appointmentId Int         @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model ChatSession {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  id        Int       @id @default(autoincrement())
  patientId Int
  doctorId  Int
  doctor    Doctor    @relation("DoctorChats", fields: [doctorId], references: [id], onDelete: Cascade)
  patient   Patient   @relation("PatientChats", fields: [patientId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  senderRole    Role
  content       String
  fileUrl       String?
  fileName      String?
  readAt        DateTime?
  createdAt     DateTime    @default(now())
  id            Int         @id @default(autoincrement())
  chatSessionId Int
  senderId      Int
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Notification {
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

enum RecordType {
  LAB_RESULT
  PRESCRIPTION
  VISIT_SUMMARY
  MEDICAL_HISTORY
  OTHER
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELED
  NEW_MESSAGE
  MEDICAL_RECORD_UPDATE
  SYSTEM
}
