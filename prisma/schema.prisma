generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

enum RecordType {
  LAB_RESULT
  PRESCRIPTION
  VISIT_SUMMARY
  MEDICAL_HISTORY
  OTHER
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELED
  NEW_MESSAGE
  MEDICAL_RECORD_UPDATE
  SYSTEM
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  role          Role           @default(PATIENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fullName      String
  profileImage  String?
  phone         String?
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  patient       Patient?
  doctor        Doctor?
  notifications Notification[]
  sentMessages  Message[]
}

model Patient {
  id               Int             @id @default(autoincrement())
  userId           Int             @unique
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pnc              String?         @unique @db.Char(13)
  insuranceInfo    String?
  emergencyContact String?
  appointments     Appointment[]
  medicalRecords   MedicalRecord[]
  chatSessions     ChatSession[]   @relation("PatientChats")
}

model Doctor {
  id             Int             @id @default(autoincrement())
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization String
  licenseNumber  String?
  biography      String?
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  chatSessions   ChatSession[]   @relation("DoctorChats")
}

model Appointment {
  id        Int               @id @default(autoincrement())
  patientId Int
  doctorId  Int
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  type      AppointmentType
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  patient      Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor       Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  videoSession VideoSession?
}

model MedicalRecord {
  id          Int        @id @default(autoincrement())
  patientId   Int
  doctorId    Int
  title       String
  description String
  fileUrl     String?
  type        RecordType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model VideoSession {
  id            Int       @id @default(autoincrement())
  appointmentId Int       @unique
  sessionToken  String    @unique
  startedAt     DateTime?
  endedAt       DateTime?

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  patientId Int
  doctorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient  Patient   @relation("PatientChats", fields: [patientId], references: [id], onDelete: Cascade)
  doctor   Doctor    @relation("DoctorChats", fields: [doctorId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id            Int       @id @default(autoincrement())
  chatSessionId Int
  senderId      Int
  senderRole    Role
  content       String
  fileUrl       String?
  readAt        DateTime?
  createdAt     DateTime  @default(now())

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  sender      User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
