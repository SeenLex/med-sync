generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          Role      @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  fullName      String
  contactNumber String?
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  patient       Patient?
  doctor        Doctor?
  admin         Admin?
}

model Patient {
  id               String          @id @default(uuid())
  userId           String          @unique
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  insuranceInfo    String?
  emergencyContact String?
  appointments     Appointment[]
  medicalRecords   MedicalRecord[]
  chatSessions     ChatSession[]   @relation("PatientChats")
}

model Doctor {
  id             String          @id @default(uuid())
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization String
  licenseNumber  String?
  biography      String?
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  availability   Availability[]
  chatSessions   ChatSession[]   @relation("DoctorChats")
}

model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department  String?
  permissions String[] @default([])
}

model Appointment {
  id           String            @id @default(uuid())
  patientId    String
  doctorId     String
  startTime    DateTime
  endTime      DateTime
  status       AppointmentStatus @default(PENDING)
  type         AppointmentType
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  patient      Patient           @relation(fields: [patientId], references: [id])
  doctor       Doctor            @relation(fields: [doctorId], references: [id])
  videoSession VideoSession?
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

model Availability {
  id          String  @id @default(uuid())
  doctorId    String
  dayOfWeek   Int
  startTime   String
  endTime     String
  isAvailable Boolean @default(true)
  doctor      Doctor  @relation(fields: [doctorId], references: [id])
}

model MedicalRecord {
  id          String     @id @default(uuid())
  patientId   String
  doctorId    String
  title       String
  description String
  fileUrl     String?
  type        RecordType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  patient     Patient    @relation(fields: [patientId], references: [id])
  doctor      Doctor     @relation(fields: [doctorId], references: [id])
}

enum RecordType {
  LAB_RESULT
  PRESCRIPTION
  VISIT_SUMMARY
  MEDICAL_HISTORY
  OTHER
}

model VideoSession {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  sessionToken  String      @unique
  startedAt     DateTime?
  endedAt       DateTime?
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id        String    @id @default(uuid())
  patientId String
  doctorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  patient   Patient   @relation("PatientChats", fields: [patientId], references: [id])
  doctor    Doctor    @relation("DoctorChats", fields: [doctorId], references: [id])
  messages  Message[]
}

model Message {
  id            String      @id @default(uuid())
  chatSessionId String
  senderId      String
  senderRole    Role
  content       String
  fileUrl       String?
  readAt        DateTime?
  createdAt     DateTime    @default(now())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELED
  NEW_MESSAGE
  MEDICAL_RECORD_UPDATE
  SYSTEM
}
